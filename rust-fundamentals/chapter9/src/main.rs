use std::net::IpAddr;

fn main(){

    //在定义一个可能失败的函数时，有限考虑返回Result，否则使用panic！
    // 可以使用 panic!
    //     -演示某些概念:unwrap
    //     -原型代码:unwrap、expect
    //     -测试:unwrap、expect

    //你可以确定Result就是OK:unwrap
    let home:IpAddr = "127.0.0.1".parse().unwrap();


    // 错误处理的指导性建议
    // 当代码最终可能处于损坏状态时，最好使用panic!
    // 损坏状态(Bad state):某些假设、保证、约定或不可变性被打破
    // -例如非法的值、矛盾的值或空缺的值被传入代码
    // -以及下列中的一条:
    // ·这种损坏状态并不是预期能够偶尔发生的事情。
    // ·在此之后，您的代码如果处于这种损坏状态就无法运行。
    // ·在您使用的类型中没有一个好的方法来将这些信息(处于损坏状态)进行编码。

    // 调用你的代码，传入无意义的参数值:panic!
    // 调用外部不可控代码，返回非法状态，你无法修复:panic!
    // 如果失败是可预期的:Result
    // 当你的代码对值进行操作，首先应该验证这些值:panic!






}