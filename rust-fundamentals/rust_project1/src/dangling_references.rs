//引用的规则
//（1）在任何给定的时刻，只能满足下列条件之一：
//①一个可变的引用
//②任意数量不可变的引用
//（2）引用必须一致有效
fn main() {
    // 悬空指针（Dangling pointer）：一个指针引用了内存中的某个地址，而这块内存地址可能已经被释放或者被分配给其他人使用了。
    // 在rust语言中编译器会保证引用永远都不会出现悬空引用，如果你引用了某些数据，编译器会保证在引用离开作用域之前数据都不会离开作用域。
    let r = dangle();

    println!("Hello, world!");
}

fn dangle() -> &String {
    let s = String::from("hello,world!!!"); //变量s超出作用域之后就会被释放掉
    &s //返回的指针将指向一个空内存区域
       // 将提示报错信息，提示缺少一个引用的标识符
}
